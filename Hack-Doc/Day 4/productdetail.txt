
"use client";
import { useState, useEffect } from "react";

import { client } from "@/sanity/lib/client";
import Image from "next/image";
import Header from "@/app/components/header";
import Footer from "@/app/components/footer";
interface ProductDetailProps {
  params: { productDetail: string }; // Matches the folder name
}
export default function ProductDetail({ params }: ProductDetailProps) {
  const [product, setProduct] = useState<any>(null);

  useEffect(() => {
    async function fetchProduct() {
      try {
      const fetchedProduct = await client.fetch(
        `*[_type == "product" && _id == $id][0]{
            _id,
            productName,
            "imageUrl": image.asset->url,
            category,
            price,
            colors,
            description
        }`,
        { id: params.productDetail }
      );
      setProduct(fetchedProduct); } catch (error) {
        console.error("Error fetching product:", error);
      }

    }
    fetchProduct();
  }, [params.productDetail]);

  if (!product) {
    return <div>Loading...</div>;
  }
  if (!product.productName || !product.imageUrl) {
    return <div>Product data is missing some required fields</div>;
  }


 
    return (
      <>
      <Header />
        <div className="container mx-auto pt-12 px-4">
  <div className="flex flex-wrap items-start justify-center gap-8">
    <div className="w-full sm:w-2/3 lg:w-auto">
      <Image
        src={product.imageUrl}
        alt="Product image"
        width={653}
        height={653}
        className="rounded mx-auto"
      />
    </div>

    <div className="w-full sm:w-1/2 lg:w-1/3">
      <h1 className="text-3xl sm:text-4xl lg:text-5xl font-medium text-gray-900 mb-6 text-center sm:text-left">
        {product.productName}
      </h1>

      <div>
        <p className="text-sm sm:text-base text-gray-900 leading-6 sm:leading-7 mb-6 text-center sm:text-left">
          {product.description}
        </p>
        <div className="text-center sm:text-left mb-4">
          <span className="text-2xl sm:text-3xl lg:text-4xl font-medium text-gray-900">
            {product.price}
          </span>
        </div>
        <AddToCartButton product={product} />
      </div>
    </div>
  </div>
</div>
<Footer />
</>
);
}
function AddToCartButton({ product }: { product: any }) {
  return (
    <div>
      <AddToCart product={product} />
    </div>
  );
}

function AddToCart({ product }: { product: any }) {
  const [cart, setCart] = useState<{ id: string; name: string; price: number; quantity: number }[]>([]);

  const handleAddToCart = () => {
    setCart((prevCart) => {
      const existingItem = prevCart.find((item) => item.id === product._id);
      if (existingItem) {
        return prevCart.map((item) =>
          item.id === product._id
            ? { ...item, quantity: item.quantity + 1 }
            : item
        );
      } else {
        return [
          ...prevCart,
          { id: product._id, name: product.productName, price: product.price, quantity: 1 },
        ];
      }
    });
  };

  return (
    <div>
      <button
        onClick={handleAddToCart}
        className="px-4 py-2 bg-blue-600 text-white font-semibold rounded hover:bg-blue-700"
      >
        Add to Cart
      </button>
      <Cart cart={cart} setCart={setCart} />
    </div>
  );
}
function Cart({
  cart,
  setCart,
}: {
  cart: { id: string; name: string; price: number; quantity: number }[];
  setCart: React.Dispatch<
    React.SetStateAction<{ id: string; name: string; price: number; quantity: number }[]>
  >;
}) {
  const handleIncrement = (id: string) => {
    setCart((prevCart) =>
      prevCart.map((item) =>
        item.id === id ? { ...item, quantity: item.quantity + 1 } : item
      )
    );
  };

  const handleDecrement = (id: string) => {
    setCart((prevCart) =>
      prevCart
        .map((item) =>
          item.id === id && item.quantity > 1
            ? { ...item, quantity: item.quantity - 1 }
            : item
        )
        .filter((item) => item.quantity > 0)
    );
  };

  const totalPrice = cart.reduce((total, item) => total + item.price * item.quantity, 0);

  return (
    <div className="mt-6 border p-4 rounded bg-gray-100">
      <h2 className="text-xl font-bold mb-4">Cart</h2>
      {cart.length === 0 ? (
        <p>Your cart is empty.</p>
      ) : (
        <div>
          {cart.map((item) => (
            <div key={item.id} className="flex justify-between items-center mb-2">
              <span>{item.name}</span>
              <div className="flex items-center space-x-2">
                <button
                  onClick={() => handleDecrement(item.id)}
                  className="px-2 py-1 bg-red-600 text-white rounded"
                >
                  -
                </button>
                <span>{item.quantity}</span>
                <button
                  onClick={() => handleIncrement(item.id)}
                  className="px-2 py-1 bg-green-600 text-white rounded"
                >
                  +
                </button>
              </div>
              <span>${item.price * item.quantity}</span>
            </div>
          ))}
          <div className="font-semibold text-right mt-4">Total: ${totalPrice}</div>
        </div>
      )}
       <button className="px-4 py-2 bg-blue-600 text-white font-semibold rounded hover:bg-blue-700">Checkout</button>

    </div>
  );
}

